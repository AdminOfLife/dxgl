; Example configuration for DXGL
; Place in the same folder as a game or application and rename to dxgl.ini
; in order to pre-set profile settings for the game or application.

[system]
; NoWriteRegistry - Boolean
; If true, do not write a profile or settings to the user's registry.
; Set to true if distributing the DXGL ddraw.dll with a game or application.
; Default is false so ensure the following line is set to avoid writing to
; the end user's registry.
NoWriteRegistry = true

; OverrideDefaults - Boolean
; If true, settings not set in the .ini file will not be read from the
; settings in the Global section of the user's registry but instead will use
; the default settings.  Users may still override these settings with a profile
; in DXGL Config.  If NoWriteRegistry is false, a profile will still be
; created if it does not exist.
; If false, the settings in DXGL Config global section will be used as default.
; Default is false
OverrideDefaults = false

[display]
; ScalingMode - Integer
; Determines the method DXGL will use to scale full screen modes.
; Default is 0
; The following values are valid:
; 0 - Change display mode to match requested mode.
; 1 - Stretch output to desktop
; 2 - Stretch output to desktop, preserving aspect ratio
; 3 - Center output on desktop
; 4 - Change display mode, stretch if matching mode not found
; 5 - Change display mode, aspect corrected stretch if matching mode not found
; 6 - Change display mode, center if matching mode not found
; 7 - Crop output to desktop, preserving aspect ratio
ScalingMode = 0

; FullscreenWindowMode - Integer
; Determines how DXGL will draw the window for fullscreen modes.
; Some modes will override the scaling mode.
; The following values are valid:
; 0 - Use exclusive fullscreen
; 1 - Use non-exclusive fullscreen, not quite borderless windowed mode
; 2 - Use a non-resizable window
; 3 - Use a resizable window, uses scaler mode, preferably 1, 2, 3, or 7
; 4 - Use a borderless, non-resizable window, called windowed borderless in industry
FullscreenWindowMode = 0

; ChangeColorDepth - Boolean
; If true, Windows will attempt to change the color depth of the screen.
; This will prevent 8-bit color modes from working correctly in Windows 7
; or earlier.  In Windows 8 or later, a compatibility mode must be set to
; make low color depths work, but in those operating systems 8-bit color
; will work.
; DXGL always performs color depth conversion for DirectDraw internally
; via the OpenGL runtime regardless of the operating system's display mode.
; Default is false and is recommended except in special circumstances.
ChangeColorDepth = false

; AllColorDepths - Boolean
; Adds 8, 16, 24, and 32-bit color modes if they are not already
; added to the list of display modes passed to the program.
; (future)Equivalent to setting AddColorDepths to 29.
; (future)Overridden by AddColorDepths.
; Default is true if Windows 8 or higher is detected, false otherwise.
AllColorDepths = true

; AddColorDepths - Integer
; (future) Adds additional color modes if they are not already
; added to the list of display modes passed to the program.
; This is a bit-mapped variable, add up the desired color depths from
; the list of values below:
; 1 - Add 8-bit modes
; 2 - Add 15-bit modes
; 4 - Add 16-bit modes
; 8 - Add 24-bit modes
; 16 - Add 32-bit modes
; Default is 29 if Windows 8 or higher is detected, 0 otherwise.
; Adding both 15 and 16 bit modes at the same time may cause
; crashes or undefined behavior in some programs.
AddColorDepths = 29

; ExtraModes - Boolean
; Adds additional video modes to the list of resolutions.
; If a display scaling mode is not set and postprocess scaling
; is set to automatic, it will add several low resolution pixel doubled
; video modes.
; Default is true.
; (future)Equivalent to setting AddModes to 7.  Overridden by AddModes.
ExtraModes = true

; AddModes - Integer
; (future) Adds additional video modes to the list of resolutions.
; This is a bitmapped variable, add up the desired mode lists from
; the list of values below:
; 0 - None
; 1 - Add common low-resolution modes
; 2 - Add less common low-resolution modes
; 4 - Add uncommon standard definition modes
; 8 - Add high definition modes
; 16 - Add QHD to UHD modes.
; 32 - Add over-4K UHD modes.  Check GPU specifications before enabling.
; 64 - Add very uncommon resolutions of all dimensions.
; Default is 1.
AddModes = 1

; SortModes - Integer
; Determines whether or not to sort display modes by either
; resolution first or color depth first.  This can make in-game
; display mode menus display video modes in increasing order instead
; of potentially in a random assortment.
; The following values are valid:
; 0 - Do not sort.  Display modes detected by the system will be listed in
;     the order they appear.  Display modes added by DXGL will be added at
;     the end.
; 1 - Sort video modes, grouping by color depth.
; 2 - Sort video modes, grouping by resolution.
; Default is 0.
SortModes = 0

[scaling]
; ScalingFilter - Integer
; Selects the filter to be used to scale the output image
; Default is 0
; The following values are valid:
; 0 - Nearest-neighbor stretching
; 1 - Bilinear interpolation
ScalingFilter = 0

; AdjustPrimaryResolution - Integer
; Determines whether or not to resize the buffers used to hold the primary
; buffers if scaling is enabled.  Enabling this may cause graphical glitches
; and/or slowdown.
; The following values are valid:
; 0 - Use native primary surface size.  Most compatible.
; 1 - Adjust primary surface size to match display.
; The following will be added in the future:
; 2 - Adjust primary surface to nearest integer multiple of native.
; 3 - Use exact 1.5x scale.
; 4 - Use exact 2x scale.
; 5 - Use exact 2.5x scale.
; 6 - Use exact 3x scale.
; 7 - Use exact 4x scale.
; 8 - Use custom scale.
; Default is 0.
AdjustPrimaryResolution = 0

; PrimaryScaleX - Floating point
; (future) Sets the scaling amount in the X dimension for custom primary
; buffer scaling.
; If zero, negative, or an invalid value, will be interpreted as 1.0
; Default is 1.0
PrimaryScaleX = 1.0

; PrimaryScaleY - Floating point
; (future) Sets the scaling amount in the Y dimension for custom primary
; buffer scaling.
; If zero, negative, or an invalid value, will be interpreted as 1.0
; Default is 1.0
PrimaryScaleY = 1.0

; ScreenAspect - Floating point or string
; Sets the aspect ratio of the display output.
; May be entered as a floating point number or as aspect ratio notation.
; Examples would be 1.33333 or 4:3 for a "fullscreen" aspect ratio.
; Or "Default" may be entered to use the default aspect for the selected mode.
; If zero, negative, "Default" or an invalid value, the display will default
; to a 1:1 PAR except on specific low-resolution modes which may use 2:1 or
; 1:2 PAR.
; Default is "Default"
ScreenAspect = Default

; DPIScale - Integer
; Overrides Windows DPI scaling on high-DPI modes.
; Has no effect on Windows XP or earlier, or if "Windows XP style DPI Scaling"
; is enabled in Windows, or if the Desktop Window Manager is disabled.
; Setting to 0 allows Windows to control high-DPI scaling, which may cause
; glitches.
; Setting to 1 causes DXGL to use the SetDPIAwareness API on Windows 8.1 or 
; higher to set the process as Per-Monitor High DPI Aware, or on Windows Vista
; through 8.0 use the SetProcessDPIAware API to set the process as High DPI
; Aware.  If the GUI is initialized before ddraw.dll is loaded, this will have
; no effect.
; Setting to 2 will adjust the Windows Application Compatibility registry
; values to disable Windows High DPI scaling.  This may cause your application
; or game to restart as the registry value is set.  Use this mode only if
; setting DPIScale to 1 has no effect.
; Default is 1.
DPIScale = 1

[postprocess]
; PostprocessFilter - Integer
; Selects the filter to use for the postprocess pass.
; (future)If a post processing shader is selected this will be clamped to 1
; or overridden by the shader metadata.
; This will be ignored if there is no 
; The following values are valid:
; 0 - Nearest-neighbor stretching
; 1 - Bilinear interpolation
PostprocessFilter = 0

; PostprocessScaleX - Floating point
; Scaling in the X direction for the postprocess pass.
; May be overridden by metadata in a postprocess shader.
; If either X or Y are set to 0 or less than 0.25 DXGL will select a scaling
; amount that doubles the width if it is 400 or fewer pixels wide, and doubles
; the lines if the height is 300 or fewer lines.
; Default is 0.0
PostprocessScaleX = 0.0

; PostprocessScaleY - Floating point
; Scaling in the Y direction for the postprocess pass.
; May be overridden by metadata in a postprocess shader.
; If either X or Y are set to 0 or less than 0.25 DXGL will select a scaling
; amount that doubles the width if it is 400 or fewer pixels wide, and doubles
; the lines if the height is 300 or fewer lines.
; Default is 0.0
PostprocessScaleY = 0.0

; EnableShader - Boolean
; (future) If true, uses a custom shader to render the postprocess pass.
; Default is false
EnableShader = false

; ShaderFile
; (future)Path to a file containing either a GLSL fragment shader or a
; to-be-determined metadata file containing a shader pipeline and certain
; parameters.
; The path can be relative (will search the Shaders subdirectory of the
; install directory and the path where the ddraw.dll implementation has been
; placed) or absolute.
; Default is undefined.
; ShaderFile = example.fs

[d3d]
; TextureFilter - Integer
; Texture filtering method for Direct3D draw commands.
; The following values are valid:
; 0 - Use the setting in the Direct3D texture stage state
; 1 - GL_NEAREST (Nearest-neighbor filtering)
; 2 - GL_LINEAR (Bilinear filtering)
; 3 - GL_NEAREST_MIPMAP_NEAREST (Nearest-neighbor with mipmap)
; 4 - GL_NEAREST_MIPMAP_LINEAR (Nearest-neighbor with linear mipmap)
; 5 - GL_LINEAR_MIPMAP_NEAREST (Bilinear with mipmap)
; 6 - GL_LINEAR_MIPMAP_LINEAR (Trilinear filtering)
; Default is 0
TextureFilter = 0

; AnisotropicFiltering - Integer
; (future) Enabled anisotropic filtering to improve display quality
; May cause slowdown on older, low-end graphics cards in some situations.
; The following values are valid, though larger values may be dependent
; on the capabilities of the graphics card:
; 0 - Use the setting in the Direct3D texture stage state
; 1 - Disables anisotropic filtering.
; 2 - Sets anisotropic filtering to 2x.
; 4 - Sets anisotropic filtering to 4x.
; 8 - Sets anisotropic filtering to 8x.
; 16 - Sets anisotropic filtering to 16x.
AnisotropicFiltering = 0

; Antialiasing - Hexadecimal integer
; (future) Enables multisample antialiasing.  May cause significant
; slowdown, especially on slower graphics cards.
; The following values are valid on all graphics cards:
; 0x0 - Enables antialiasing if requested by the D3D device.
; 0x1 - Disables antialiasing
; For enabling antialiasing, run DXGLCFG to enumerate the available
; antialiasing modes for your graphics card.  Then retrieve the value
; from the registry.
; You may also use a number from 0x2 to 0xff to enable standard OpenGL
; multisampling.
; Add 0x10000 to the number to enable the specific antialiasing mode only
; when the application requests it.
; Default is 0x0
Antialiasing = 0x0

; D3DAspect - Integer
; (future)Selects whether or not to adjust the aspect ratio for Direct3D
; content.  Also known as widescreen hack.
; Only active if the display scaling is set to "Stretch to screen"
; The following values are valid:
; 0 - Stretches the output to the screen.
; 1 - Expands the viewable area, i.e. hor+.  There may be missing geometry
;     off-screen.
; 2 - Crops the display to the viewable area.  May cut off parts of the game
;     graphics.
; Default is 0
D3DAspect = 0

[advanced]
; VSync - Integer
; Determines vertical retrace behavior.
; This option is reserved for future expansion, and the only valid value is
; currently 0.
VSync = 0

; TextureFormat - Integer
; Determines the internal format to use for textures and DirectDraw
; surfaces.
; This option is reserved for future expansion, and the only valid value is
; currently 0.
TextureFormat = 0

; TexUpload - Integer
; Determines the method used to upload texture data to the graphics card.
; This option is reserved for future expansion, and the only valid value is
; currently 0.
TexUpload = 0

[debug]
; DebugNoExtFramebuffer - Boolean
; Disables use of the EXT_framebuffer_object OpenGL extension.
; WARNING:  If this is enabled and either ARB_framebuffer_object is
; unavailable or DebugNoArbFramebuffer is enabled, then DXGL will fail
; to initialize.
; Default is false
DebugNoExtFramebuffer = false

; DebugNoArbFramebuffer - Boolean
; Disables use of the ARB_framebuffer_object OpenGL extension.
; WARNING:  If this is enabled and either EXT_framebuffer_object is
; unavailable or DebugNoExtFramebuffer is enabled, then DXGL will fail
; to initialize.
; Default is false
DebugNoArbFramebuffer = false

; DebugNoES2Compatibility - Boolean
; Disables use of the ARB_ES2_compatibility OpenGL extension.
; Currently this means that GL_RGB565 16-bit internal texture format
; will not be used.
; Default is false
DebugNoES2Compatibility = false

; DebugNoExtDirectStateAccess - Boolean
; Disables use of the EXT_direct_state_access OpenGL extension.
; This extension allows DXGL to more easily manipulate texture and other
; objects.  Disabling direct state access will revert to a more traditional
; approach to manipulating OpenGL objects.
; Default is false
DebugNoExtDirectStateAccess = false

; DebugNoArbDirectStateAccess - Boolean
; Disables use of the ARB_direct_state_access OpenGL extension.
; This extension allows DXGL to more easily manipulate texture and other
; objects.  Disabling direct state access will revert to a more traditional
; approach to manipulating OpenGL objects.
; Default is false
DebugNoArbDirectStateAccess = false

; DebugNoSamplerObjects - Boolean
; Disables use of sampler objects.  Disabling sampler objects may reduce
; the performance and accuracy of Direct3D commands.
; Default is false
DebugNoSamplerObjects = false

; DebugNoGpuShader4 - Boolean
; Disables use of the EXT_gpu_shader4 OpenGL extension.
; Disabling this extension may reduce the accuracy of DirectDraw drawing
; commands.  This has no effect on OpenGL 3.0 or later as this functionality
; is in core.
; In addition disabling GLSL 1.30 and EXT_gpu_shader4 will disable DirectDraw
; ROP support.
; Default is false.
DebugNoGpuShader4 = false

; DebugNoGLSL130 - Boolean
; Disables use of GLSL 1.30 shaders.  Enabling this parameter as well as
; DebugNoGpuShader4 will disable integer processing of DirectDraw commands
; as well as disabling DirectDraw ROP support.
; Default is false
DebugNoGLSL130 = false

; DebugMaxGLVersionMajor - Integer
; Determines the maximum OpenGL major version available to DXGL.
; If the system has a lower OpenGL version that will take precedence.
; If this value is 0 than DXGL will use the highest OpenGL version
; available to the system and ignore DebugMaxGLVersionMinor.
; Default is 0
DebugMaxGLVersionMajor = 0

; DebugMaxGLVersionMinor - Integer
; Determines the maximum OpenGL minor version available to DXGL.
; This will be ignored if the system OpenGL major version is less than
; DebugMaxGLVersionMajor.
; Default is 0
DebugMaxGLVersionMinor = 0
